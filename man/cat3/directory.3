SUBROUTINES
           directory(3) - directory operations

INVOCATION
           #include <sys/types.h>
           #include <dirent.h>
           DIR *opendir( dirname )
                 char *dirname;
           struct dirent *readdir( dirp )
                 DIR *dirp;
           off_t telldir( dirp )
                 DIR *dirp;
           void seekdir( dirp, loc )
                 DIR *dirp;
                 off_t loc;
           void rewinddir( dirp )
                 DIR *dirp;
           int closedir( dirp )
                 DIR *dirp;

EXPLANATION
           Opendir(3) establishes a connection between the directory named
           by <dirname> and a unique object of type DIR known as a
           stream that it creates. Opendir(3) returns a pointer
           be used to identify the directory stream in subsequent calls.
           A NULL pointer is returned if <dirname> cannot be
           accessed or is not a directory, or if opendir(3) is unable to
           the DIR object (perhaps due to insufficient memory).

           Readdir(3) returns a pointer to an internal structure containing
           information about the next active directory entry. No inactive
           entries are reported. The internal structure may be overwritten
           by another operation on the same directory stream; the amount of
           storage needed to hold a copy of the internal structure is given
           by the value of a macro, DIRENTSIZ(strlen(direntp->d_name)), not
           by sizeof(struct dirent) as one might expect. A NULL pointer is
           returned upon reaching the end of the directory, upon detecting
           an invalid location in the directory, or upon occurrence of an
           error while reading the directory.

           Telldir(3) returns the current position associated with the named
           directory stream for later use as an argument to seekdir(3).
           Seekdir(3) sets the position of the next readdir(3) operation on  
           the named directory stream. The new position reverts to the one
           associated with the directory stream when the telldir(3) operation
           from which <loc> was obtained was performed.

           Rewinddir(3) resets the position of the named directory stream to
           the beginning of the directory. All buffered data for the directory
           stream is discarded, thereby guaranteeing that the actual file
           system directory will be referred to for the next readdir(3) on the
           directory stream.

           Closedir(3) closes the named directory stream; internal resources
           used for the directory stream are liberated, and subsequent use of
           the associated DIR object is no longer valid. Closedir(3) returns
           a value of zero if no error occurs, -1 otherwise.  There are several
           possible errors that can occur as a result of these operations; the
           external integer variable <errno> is set to indicate the specific
           error. (Readdir's detection of the normal end of a directory is not
           considered to be an error.)

EXAMPLE
           Sample code which searches the current working directory for
           an entry. Usage: "a.out directory filename".

           #include <sys/types.h>
           #include <dirent.h>
           #include <stdio.h>
           main( argc, argv )
           int   argc;
           char  *argv[];
           {
           DIR *dirp;
           struct dirent *dp;
           if ( (dirp = opendir( argv[1] )) == NULL )
               {
               fprintf( stderr, "Cannot open directory\n" );
               exit( 1 );
               }
           while ( (dp = readdir( dirp )) != NULL )
               if ( strcmp( dp->d_name, argv[2] ) == 0 )
            {
            (void) closedir( dirp );
            printf( "Found\n" );
            exit( 0 );
            }
           (void) closedir( dirp );
           printf( "Not found\n" );
           exit( 1 );
           }

REFERENCES
           dirent(4)

WARNINGS
           The value returned by telldir(3) need not have any simple
           interpretation and should only be used as an argument to
           seekdir(3). Similarly, the <loc> argument to seekdir(3) must
           be obtained from a previous telldir(3) operation on the same
           directory stream. Telldir(3) and seekdir(3) are unreliable
           when the directory stream has been closed and reopened. It
           is best to avoid using telldir(3) and seekdir(3) altogether.  
           The exact set of <errno> values and meanings may vary among
           implementations.

           Because directory entries can dynamically appear and disappear,
           and because directory contents are buffered by these routines,
           an application may need to continually rescan a directory to
           maintain an accurate picture of its active entries.

AUTHOR
           Douglas A. Gwyn
 
